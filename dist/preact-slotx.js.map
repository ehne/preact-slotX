{"version":3,"file":"preact-slotx.js","sources":["../src/index.js"],"sourcesContent":["// Licence (you must include this if you choose to copy&paste):\n/*\nMIT License\n\nCopyright (c) 2020 darcy lugt-falk\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\nimport {createContext, html, useState, useMemo, useEffect} from \"htm/preact\"\n\n\nconst SlotsContext = createContext({\n    named: {},\n    changed: []\n})\n\n/*\n    {\n        named:{\n            \"foo\":Component\n        },\n        changed:[\"foo\"]\n    }\n*/\n\nexport function Slot({name, children}) {\n    const context = useContext(SlotsContext);\n    const [content, setContent] = useState(children)\n\n    // only run this code if the the \"changed\" array has changed in regards to the name.\n    // note: this will run twice, once when name is added, and once when it is removed. (because the array changed both times)\n    useEffect(()=>{\n        \n        setContent(context.named[name])\n\n        // cleanup function, removes name from the array so we can change it later.\n        return () => {\n            context.changed = context.changed.filter((val)=>(val!=name))\n            console.log(context)\n        }\n        \n    }, [context.changed.filter((val)=>(val===name))])\n\n    // checks if there is no SlotContent component defined for the specific name.\n    if (context.named[name] === undefined) {\n        return children\n    } else {\n        return content\n\n    }\n} \n\n\nexport function SlotContent({name,children}) {\n    const context = useContext(SlotsContext)\n\n    // defines the component\n    context.named[name] = children\n    // runs this code when the children change.\n    useMemo(() => {\n        // set slot value\n        context.named[name] = children\n        // add name to array so that Slot knows to update\n        context.changed.push(name)\n    }, [children]);\n\n    //console.log(context)\n    return null\n}\n\nexport function SlotProvider({children}) {\n    const [named, setNamed] = useState({});\n    const [changed, setChanged] = useState([]);\n    \n    return html`<${SlotsContext.Provider} value=${ {\n        named, changed\n    } }>\n        ${children}\n    <//>\n    `\n}"],"names":["SlotsContext","createContext","named","changed","name","children","context","useContext","useState","content","setContent","useEffect","filter","val","console","log","undefined","useMemo","push","html","Provider"],"mappings":"oKA6BA,IAAMA,EAAeC,gBAAc,CAC/BC,MAAO,GACPC,QAAS,kCAYSC,IAAAA,KAAMC,IAAAA,SAClBC,EAAUC,WAAWP,KACGQ,WAASH,GAAhCI,OAASC,OAiBhB,OAbAC,YAAU,WAKN,OAHAD,EAAWJ,EAAQJ,MAAME,eAIrBE,EAAQH,QAAUG,EAAQH,QAAQS,OAAO,SAACC,UAAOA,GAAKT,IACtDU,QAAQC,IAAIT,KAGjB,CAACA,EAAQH,QAAQS,OAAO,SAACC,UAAOA,IAAMT,WAGbY,IAAxBV,EAAQJ,MAAME,GACPC,EAEAI,uCAMcL,IAAAA,KAAKC,IAAAA,SACxBC,EAAUC,WAAWP,GAa3B,OAVAM,EAAQJ,MAAME,GAAQC,EAEtBY,UAAQ,WAEJX,EAAQJ,MAAME,GAAQC,EAEtBC,EAAQH,QAAQe,KAAKd,IACtB,CAACC,+CAMsBA,IAAAA,SACnBH,EAAmBM,WAAS,OAC5BL,EAAuBK,WAAS,OAEvC,OAAOW,WAAQnB,EAAaoB,SAAmB,CAC3ClB,MAAAA,EAAOC,QAAAA,GAELE"}